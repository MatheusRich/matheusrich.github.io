<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rich Codes</title>
    <description>Hi, I'm Matheus Richard, a Software Engineering from Brazil. I'm an open source dev, I love music and my newfound passion is game development.</description>
    <link>http://matheusrich.github.io/</link>
    <atom:link href="http://matheusrich.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 19 Jul 2020 13:00:45 -0300</pubDate>
    <lastBuildDate>Sun, 19 Jul 2020 13:00:45 -0300</lastBuildDate>
    <generator>Jekyll v4.1.1</generator>
    
      
      <item>
        <title>Baking Tasks With 'Bake'</title>
        <description>&lt;p&gt;How many times have you searched how to pass arguments to a rake task? &lt;a href=&quot;https://github.com/ioquatix/bake/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bake&lt;/code&gt;&lt;/a&gt; makes it as easy as creating a simple method (&lt;strong&gt;literally&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;For demonstration, we’re gonna create a task that generates a new blog post file for you.&lt;/p&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;First of all we need to install the gem. Make sure you have at least Ruby 2.5.0. Add &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bake&lt;/code&gt;&lt;/strong&gt; to your project’s Gemfile and install it:
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle add bake
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Create a &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bake.rb&lt;/code&gt;&lt;/strong&gt; file at the root of your project. This is where the top level tasks will live.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;baking-you-first-task&quot;&gt;Baking you first task&lt;/h3&gt;
&lt;p&gt;As I said earlier, just create a ruby method and it will do the job.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Creates a new post&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;new_post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;post_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;posts/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;downcase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;gsub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/ /&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'-'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.md&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;post_content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;---&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;title: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;---&quot;&lt;/span&gt;

  &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post_content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s it! Lets run it.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bake new_post &lt;span class=&quot;s1&quot;&gt;'new post'&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Creates 2020-07-16-new-post.md&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;To pass strings with whitespaces, wrap them in quotes.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Optional arguments are accepted as well. Maybe we want our posts to be in different extensions sometimes.
Let’s add an optional argument to our task.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Creates a new post&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;new_post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'md'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;post_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;downcase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;gsub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/ /&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'-'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extension&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;post_content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;---&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;title: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;---&quot;&lt;/span&gt;

  &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post_content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can use keyword arguments too! Now we’re going to add categories on our posts.&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Creates a new post&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;new_post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'md'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;categories: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;post_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;downcase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;gsub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/ /&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'-'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extension&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;post_content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;---&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;title: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;categories: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;---&quot;&lt;/span&gt;

  &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post_content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And you pass named arguments like this:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bake new_post &lt;span class=&quot;s1&quot;&gt;'bake is awesome'&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ruby bake'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;its-2020-i-need-types&quot;&gt;It’s 2020, I need types!&lt;/h4&gt;
&lt;p&gt;Sometimes it’s useful to coerce the task inputs in other types, since they are always strings. No prob, &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bake&lt;/code&gt;&lt;/strong&gt; got you!&lt;/p&gt;

&lt;p&gt;Just add some documenting comments above your method and you’re good to go:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Creates a new post&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# @param post_name [String] name of the post to be created.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# @param extension [String] file extension of the post to be created.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# @param categories [Array(String)] categories of the post.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;new_post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'md'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;categories: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;post_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;downcase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;gsub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/ /&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'-'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extension&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;post_content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;---&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;title: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;categories: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;---&quot;&lt;/span&gt;

  &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post_content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, instead of wrapping our categories in quotes, we can pass them as comma separated values and they will be coerced into an array of strings.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bake new_post &lt;span class=&quot;s1&quot;&gt;'bake is awesome'&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ruby,bake
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;helper-methods&quot;&gt;Helper methods?&lt;/h4&gt;
&lt;p&gt;That code is kinda messy. We can extract some methods and &lt;strong&gt;not&lt;/strong&gt; having them showing up as tasks. Make them &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;private&lt;/code&gt; that’s it.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Creates a new post&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# @param post_name [String] name of the post to be created.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# @param extension [String] file extension of the post to be created.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# @param categories [Array(String)] categories of the post.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;new_post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'md'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;categories: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extension&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post_content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;post_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extension&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slugify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extension&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;post_content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;~&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CONTENT&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
    ---
    title: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;capitalize&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
    categories: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
    ---
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;  CONTENT&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;slugify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;downcase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;gsub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/ /&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'-'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Yeah, that looks much better. And now we can use those methods in other tasks too 😉.&lt;/p&gt;

&lt;h4 id=&quot;nested-commands&quot;&gt;Nested commands&lt;/h4&gt;
&lt;p&gt;If we want to replace Rake, we need to have nested commands. They’re called recipes in &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bake&lt;/code&gt;&lt;/strong&gt;. The tasks are namespaced by their file names. So, let’s do it.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create a dir &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bake/&lt;/code&gt; and a file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;post.rb&lt;/code&gt; there.&lt;/li&gt;
  &lt;li&gt;Copy all the content of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bake.rb&lt;/code&gt; and move to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;post.rb&lt;/code&gt; (keep &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bake.rb&lt;/code&gt; empty on the root).&lt;/li&gt;
  &lt;li&gt;Rename the task &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new_post&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# in bake/post.rb&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Creates a new post&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# @param post_name [String] name of the post to be created.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# @param extension [String] file extension of the post to be created.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# @param categories [Array(String)] categories of the post.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'md'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;categories: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extension&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post_content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now you can call it like this:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bake post:new &lt;span class=&quot;s1&quot;&gt;'Nested task!'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;listing-tasks&quot;&gt;Listing tasks&lt;/h4&gt;
&lt;p&gt;To list all available tasks run:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bake list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The result:
&lt;img style=&quot;display: block; margin: 0 auto;&quot; src=&quot;/assets/img/bake-list.png&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;Bake has this nice output when listing tasks&lt;/p&gt;

&lt;p&gt;You can filter tasks by providing a pattern:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bake list post
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;Bake makes really easy to create tasks. No DSL, no new syntax to learn. Just plain old Ruby methods! If you like it, give it some love by starring the repository &lt;a href=&quot;https://github.com/ioquatix/bake/&quot;&gt;on Github&lt;/a&gt;.&lt;/p&gt;

</description>
        
          <description>&lt;p&gt;How many times have you searched how to pass arguments to a rake task? &lt;a href=&quot;https://github.com/ioquatix/bake/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bake&lt;/code&gt;&lt;/a&gt; makes it as easy as creating a simple method (&lt;strong&gt;literally&lt;/strong&gt;).&lt;/p&gt;

</description>
        
        <pubDate>Sat, 18 Jul 2020 01:00:49 -0300</pubDate>
        <link>http://matheusrich.github.io/baking-tasks-with-bake/</link>
        <guid isPermaLink="true">http://matheusrich.github.io/baking-tasks-with-bake/</guid>
        
        
        <category>ruby</category>
        
      </item>
      
    
      
      <item>
        <title>Lessons Learned on GSoC 2019</title>
        <description>&lt;p&gt;Opening a Pull Request for Rubygems, a part of the Ruby language seemed like a terrifying thing to me. Like, all my code could be running on everyone else’s machines someday. What if I introduced a security bug? Although I’ve been contributing to open source projects since 2016, these thoughts kept on my mind.&lt;/p&gt;

&lt;p&gt;It turns out that it was an &lt;strong&gt;extremely great experience&lt;/strong&gt;. My code wasn’t “perfect” (if such thing exists), and I made a lot of mistakes, but I’ve learned so many things in the process that &lt;strong&gt;really worth it&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;display: block; margin: 0 auto;&quot; src=&quot;/assets/img/no-pain-no-gain.gif&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;Well, I guess it's just the &quot;No pain, No gain&quot; rule. =)&lt;/p&gt;

&lt;h2 id=&quot;lessons-learned&quot;&gt;Lessons Learned&lt;/h2&gt;
&lt;p&gt;Here’s some advice, so we (yes, I’m included) can avoid these mistakes in the future:&lt;/p&gt;

&lt;h3 id=&quot;1-keep-it-simple-stupid&quot;&gt;1. Keep It Simple Stupid&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;In case you didn’t know, &lt;a href=&quot;https://en.wikipedia.org/wiki/KISS_principle&quot;&gt;KISS&lt;/a&gt; is a “real thing”, not just a cool expression that I used&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well, well, well… It’s here where things get embarrassing (to me). As developers, we tend to &lt;strong&gt;overestimate&lt;/strong&gt; the problems we have, and this leads to &lt;strong&gt;overcomplicated&lt;/strong&gt; solutions. This problem showed up on the initial code of my PR for Rubygems.&lt;/p&gt;

&lt;p&gt;I wasn’t fully aware of what every piece of &lt;a href=&quot;https://github.com/bitboxer/gem-web/&quot;&gt;gem-web&lt;/a&gt; did, so I tried to modify it as little as possible. Gem-web uses Rspec for testing, while Rubygems goes with Minitest. I knew I would have to update all the tests, but one thing I kept was (almost) all development dependencies.&lt;/p&gt;

&lt;p&gt;So, when I opened the PR the gemspec of rubygems looked like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add_dependency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;%q&amp;lt;launchy&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;~&amp;gt; 2.4.3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add_development_dependency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;%q&amp;lt;mocha&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;~&amp;gt; 1.7.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add_development_dependency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;%q&amp;lt;webmock&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;~&amp;gt; 3.5.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add_development_dependency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;%q&amp;lt;vcr&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;~&amp;gt; 4.0.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So, I’ve not only added three new development dependencies (mocha, webmock, and vcr), but also a RUNTIME one (launchy). This is especially bad because the PR target is part of a programming language!&lt;/p&gt;

&lt;p&gt;As my mentor pointed out, the good old (and already added) &lt;strong&gt;Minitest&lt;/strong&gt; could replace all of those test-related dependencies.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I know that those gems exist for a reason, and you (like I do) could like mocha’s style rather than minitest’s, but if you want to increase the chances of you PR being merged, it’s a good practice not to add a bunch of dependencies.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now I had to get rid of Launchy (which was used to open the URLs on users’ browser automatically). My first take on this was to create a hash with ALL THE POSSIBLE platforms that ruby could be running on and a method to open the default browser of it (I’m a genius).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;OPEN_BROWSER_CMDS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;aix: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;defaultbrowser&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;cygwin: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cygstart&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;darwin: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;open&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;macruby: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;open&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;freebsd: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;xdg-open&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# FIXME: What to do?&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# hpux: &quot;&quot;,&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# java: &quot;&quot;,&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# dalvik: &quot;&quot;,&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# dotnet: &quot;&quot;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;linux: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;xdg-open&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;mingw32: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;netbsdelf: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;xdg-open&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;openbsd: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;xdg-open&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;bitrig: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;xdg-open&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# check this&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# solaris: &quot;sdtwebclient&quot;, # version &amp;lt; 11&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# solaris: &quot;xdg-open&quot;, # version &amp;gt; 11&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;unknown: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;freeze&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you can see, I had NO clue about to do with some platforms (like java and dotnet), and some platforms had different commands to open the default browser based on its version (like Solaris). That solution was not good enough, so I changed this hash to a &lt;strong&gt;big ugly switch case&lt;/strong&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You can see the complete awfulness &lt;a href=&quot;https://github.com/rubygems/rubygems/pull/2835/commits/7a2507ce7ccc7d9f10c13d9ab98557426aa86fc2&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;open_default_browser_cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;local_os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;local_os&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'aix'&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'defaultbrowser'&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'cygwin'&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'cygstart'&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'darwin'&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'open'&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ... many other cases&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'linux'&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'xdg-open'&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'mingw32'&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'start'&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'solaris'&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;
      &lt;span class=&quot;s1&quot;&gt;'sdtwebclient'&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;s1&quot;&gt;'xdg-open'&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Obviously, this was a terrible solution (and I knew it), but I couldn’t think on another way to accomplish it (without external dependencies). So, I opened the Pull Request anyway so the community could help out on this.&lt;/p&gt;

&lt;p&gt;One of the things they said to me was that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;open_default_browser_cmd&lt;/code&gt; was very hard to maintain, and “What if the user just want to see the URL, not opening it at all?”. Then &lt;a href=&quot;https://github.com/rubygems/rubygems/pull/2835#issuecomment-512542718&quot;&gt;André Arko&lt;/a&gt; came with a simple, yet powerful, solution that I haven’t thought of: “just read the browser from an environment variable”. This was perfect simple! Now users could choose if they want to open the browser automatically or not (and what command should do it). That awful code turned into this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;open_browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;BROWSER&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nil?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty?&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Again: &lt;strong&gt;Keep it simple, stupid!&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-communication&quot;&gt;2. Communication&lt;/h3&gt;
&lt;p&gt;One of the things I love about open source (and especially  about Ruby) is the community! Interacting with people, teaching, learning from them, this is so cool!&lt;/p&gt;

&lt;p&gt;Do use this in your favor! Like what I did in the last section: I wasn’t sure about a feature, and the community guided me. They even showed me use cases that I didn’t think of. &lt;strong&gt;Don’t be shy to ask questions!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;And that fear about adding a &lt;em&gt;security bug&lt;/em&gt;? Well, here the community can (and will) help you! That’s &lt;a href=&quot;https://github.com/simi&quot;&gt;what @simi did&lt;/a&gt; on my PR for Rubygems.&lt;/p&gt;

&lt;p&gt;Oh, and &lt;strong&gt;do not take things personally!&lt;/strong&gt; If someone adds a comment about your code, it’s just about your &lt;strong&gt;code&lt;/strong&gt;, don’t be sad about it, but use this an opportunity for learning something (or prove your point if you’re confident about your solution).&lt;/p&gt;

&lt;h3 id=&quot;3-test-test-test&quot;&gt;3. Test test test&lt;/h3&gt;
&lt;p&gt;Never forget to add tests when you add new features to a project! It &lt;em&gt;heavily&lt;/em&gt; increases the odds of your changes being accepted. And, of course, it should help you to keep track when your code is working or not, and warn you if you insert any bug. Use a coverage tool to make sure &lt;strong&gt;every piece&lt;/strong&gt; of your code is being covered!&lt;/p&gt;

&lt;h2 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;/h2&gt;
&lt;p&gt;Yeah, this article was big! But it needed to. Being part of GSoC and contributing to such a big project like Rubygems was just a fantastic experience! I’ll carry the lessons I’ve learned for the rest of my career, and they will lead me to be a better programmer.&lt;/p&gt;

&lt;p&gt;I have to thank Google so much for making this possible. I can’t describe how cool was this summer! I also have to thank Ruby and Rubygems for guiding me all the way through this. Thanks for the contributors that reviewed my PR (particularly &lt;a href=&quot;https://github.com/bronzdoc&quot;&gt;Luis&lt;/a&gt;, &lt;a href=&quot;https://github.com/duckinator&quot;&gt;Ellen&lt;/a&gt; and &lt;a href=&quot;https://github.com/simi&quot;&gt;Josef&lt;/a&gt;), and the support on Slack (&lt;a href=&quot;https://github.com/sonalkr132&quot;&gt;Aditya&lt;/a&gt; and &lt;a href=&quot;https://github.com/indirect&quot;&gt;Indirect&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://github.com/zoras&quot;&gt;Saroj (@zoras)&lt;/a&gt;, my mentor was just amazing! He always answered me as fast as he could, and made me find my way rather than giving me the answer right away! This was really cool! Thank you!&lt;/p&gt;

&lt;p&gt;At last, I like to thanks all the people next to me that always encouraged me: my &lt;em&gt;fiancee&lt;/em&gt;, my friends, all my pals at LAPPIS. Love y’all!&lt;/p&gt;

&lt;p&gt;If you’re wondering being part of GSoC 2020, &lt;strong&gt;start contributing now!&lt;/strong&gt; Have no fear! You can do it! Here are &lt;a href=&quot;/me-and-gsoc/&quot;&gt;some tips for you&lt;/a&gt; to get a headstart.&lt;/p&gt;

&lt;p&gt;That’s it, guys! If you made it until here, you’re the MVP. I hope something here helps you! And if it does, let me know! ‘Till next time! Bye!&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;display: block; margin: 0 auto;&quot; src=&quot;/assets/img/thanks.gif&quot; /&gt;&lt;/p&gt;

</description>
        
          <description>&lt;p&gt;Opening a Pull Request for Rubygems, a part of the Ruby language seemed like a terrifying thing to me. Like, all my code could be running on everyone else’s machines someday. What if I introduced a security bug? Although I’ve been contributing to open source projects since 2016, these thoughts kept on my mind.&lt;/p&gt;
</description>
        
        <pubDate>Wed, 21 Aug 2019 23:00:00 -0300</pubDate>
        <link>http://matheusrich.github.io/lessons-learned-on-gsoc-2019/</link>
        <guid isPermaLink="true">http://matheusrich.github.io/lessons-learned-on-gsoc-2019/</guid>
        
        
        <category>gsoc</category>
        
        <category>ruby</category>
        
        <category>rubygems</category>
        
      </item>
      
    
      
      <item>
        <title>The Rubygems' web command</title>
        <description>&lt;p&gt;Wow! GSoC is almost on the final evaluation period! Time really flied! I think it’s a good moment to talk a bit about my work.&lt;/p&gt;

&lt;p&gt;As I mentioned in &lt;a href=&quot;/me-and-gsoc/&quot;&gt;this post&lt;/a&gt;, I’m working with Rubygems for GSoC 2019. &lt;a href=&quot;https://github.com/rubygems/rubygems/pull/2835&quot;&gt;My Pull Request&lt;/a&gt; is still open, but I think it’s stable enough to write about it (and the process of opening it).&lt;/p&gt;

&lt;p&gt;I’ve added a new command to Rubygems: the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;web&lt;/code&gt; command. Its goal is to help developers to quickly find documentation about a particular gem.&lt;/p&gt;

&lt;h2 id=&quot;how-does-it-look&quot;&gt;How does it look?&lt;/h2&gt;

&lt;p&gt;It’s really simple to use this command. Take a look:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Do you wanna know what is the homepage for some gem?&lt;/strong&gt; Just type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem web gem_name&lt;/code&gt; and it will output the URL.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Quickly access to the rubygems page?&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem web -r gem_name&lt;/code&gt; brings it.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Can’t remember what &lt;em&gt;that&lt;/em&gt; method does?&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem web -d gem_name&lt;/code&gt; will get the documentation URL for you.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Want to dive into that good old messy code?&lt;/strong&gt; Type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem web -c gem_name&lt;/code&gt; to get its source code.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;I know, we’re too lazy to copy/paste the link:&lt;/strong&gt; Just set the environment variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BROWSER&lt;/code&gt; (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;export BROWSER=google-chrome&lt;/code&gt;) and it will automatically open the URL in the browser for you. (Pay &lt;a href=&quot;https://github.com/rubygems/rubygems/pull/2835#issuecomment-512542718&quot;&gt;André Arko&lt;/a&gt; a beer for this suggestion 😜)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Some options, like rubytoolbox, were dropped because they make this feature to bound to 3rd party services&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;whats-happening-under-the-hood&quot;&gt;What’s happening under the hood?&lt;/h2&gt;
&lt;p&gt;Adding a new method for Rubygems is not rocket science (I have a post on &lt;a href=&quot;/how-rubygems-commands-work/&quot;&gt;how to do it&lt;/a&gt;). I’ll explain here a bit of how the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;web&lt;/code&gt; command works (I will be short on some sections to keep this clearer).&lt;/p&gt;

&lt;p&gt;The first thing this commands does when it’s called is to run the method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;open_page(gem, options)&lt;/code&gt; from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gem::Web::Executor&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The method will try to find locally a gemspec of the gem you’ve typed with:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Gem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Specification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_by_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The gemspec is important because it has all the info we need (homepage, documentation URI etc).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This was one of the differences between the &lt;a href=&quot;https://github.com/bitboxer/gem-web&quot;&gt;original implementation&lt;/a&gt; of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem-web&lt;/code&gt; and mine. It was also a suggestion from the community, for &lt;a href=&quot;https://github.com/rubygems/rubygems/pull/2835#issuecomment-512256175&quot;&gt;security reasons&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If the gem is not installed, a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gem::MissingSpecError&lt;/code&gt; will be raised. In this case we have to search on the Rubygems API to find the gemspec.&lt;/p&gt;

&lt;p&gt;The method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fetch_remote_spec(gem)&lt;/code&gt; is responsible to fetch a remote gemspec (if the gem exists):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fetch_remote_spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;dep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Gem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Dependency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;found&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Gem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SpecFetcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;spec_for_dependency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Here's the request&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If everything went well, we should have the gem specification now (otherwise it will output an error message). Now the command see what options the user selected (homepage, rubygems page, source code or documentation) and calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;open_browser(uri)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I think the implementation of this method is really simple, take a look:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;open_browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;BROWSER&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nil?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty?&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BROWSER&lt;/code&gt; environment variable is set, the command uses it to open your browser with the link. Else, it juts prints the URI. Pretty easy, right?&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;display: block; margin: 0 auto;&quot; src=&quot;/assets/img/goddamn-right.gif&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-end&quot;&gt;The End&lt;/h2&gt;
&lt;p&gt;Well, that’s it! I told you that it wasn’t hard at all. This was one of the last posts I’ll do about my work on GSoC, since it’s getting to the end. In the next update I’ll talk about the &lt;a href=&quot;/lessons-learned-on-gsoc-2019/&quot;&gt;lessons I’ve learned&lt;/a&gt; while contributing for Rubygems. ‘Till next time, folks!&lt;/p&gt;

</description>
        
          <description>&lt;p&gt;Wow! GSoC is almost on the final evaluation period! Time really flied! I think it’s a good moment to talk a bit about my work.&lt;/p&gt;
</description>
        
        <pubDate>Tue, 20 Aug 2019 22:00:00 -0300</pubDate>
        <link>http://matheusrich.github.io/rubygems-web-command/</link>
        <guid isPermaLink="true">http://matheusrich.github.io/rubygems-web-command/</guid>
        
        
        <category>gsoc</category>
        
        <category>ruby</category>
        
        <category>rubygems</category>
        
        <category>cli</category>
        
      </item>
      
    
      
      <item>
        <title>How Rubygems commands works</title>
        <description>&lt;p&gt;I’m currently working on GSoC, and I have to &lt;a href=&quot;/me-and-gsoc/&quot;&gt;Integrate functionality from gem-web into RubyGems gem CLI&lt;/a&gt;. So, we’re going to add a new CLI option to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rubygems&lt;/code&gt;. As my first task on it, my mentor &lt;a href=&quot;http://github.com/zoras&quot;&gt;Saroj Maharjan&lt;/a&gt; (@zoras) sent me some PRs (&lt;a href=&quot;https://github.com/rubygems/rubygems/pull/1938&quot;&gt;#1938&lt;/a&gt; and &lt;a href=&quot;https://github.com/rubygems/rubygems/pull/1944&quot;&gt;#1944&lt;/a&gt;) to study, as well as the &lt;a href=&quot;https://github.com/rubygems/rubygems/blob/master/lib/rubygems/command.rb&quot;&gt;class&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Command&lt;/code&gt; of &lt;a href=&quot;https://github.com/rubygems/rubygems&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rubygems&lt;/code&gt; codebase&lt;/a&gt;. Here’s a bit of what I’ve learned:&lt;/p&gt;

&lt;h2 id=&quot;class-command&quot;&gt;Class Command&lt;/h2&gt;
&lt;p&gt;The first thing I noticed on the PRs was that every command inherits from the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Command&lt;/code&gt;. This class works like an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;interface&lt;/code&gt; to the children classes, that is, the children must override its methods to work properly. The comment at &lt;a href=&quot;https://github.com/rubygems/rubygems/blob/master/lib/rubygems/command.rb#L13&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/rubygems/command.rb&lt;/code&gt;&lt;/a&gt; sums this up:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Base class for all Gem commands.  When creating a new gem command, define #initialize, #execute, #arguments, #defaults_str, #description and #usage (as appropriate).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;overriding&quot;&gt;Overriding&lt;/h2&gt;

&lt;p&gt;So we need to override these methods to create our new command. Let’s take a look at them:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;initialize&lt;/code&gt;:&lt;/strong&gt; Initializes a new command, adding its name, a short description (that will be displayed in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem help commands&lt;/code&gt;). The argument &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;defaults&lt;/code&gt; is a list of default arguments (that should be mirrored in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;defaults_str&lt;/code&gt;). Here’s the &lt;a href=&quot;https://github.com/rubygems/rubygems/blob/master/lib/rubygems/command.rb#L118&quot;&gt;generic implementation&lt;/a&gt; of this method:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Gem::Command's initialize method&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;summary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaults&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@summary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;summary&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@program_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;gem &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@defaults&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaults&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dup&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@option_groups&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@deprecated_options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@parser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@when_invoked&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s possible to add new options to your command with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;add_option&lt;/code&gt;. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;initilize&lt;/code&gt; method of our new command could look like this:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'new_method'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Does an awesome thing.'&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;add_option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'--awesome'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Adds awesomeness'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:awesome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;arguments&lt;/code&gt;:&lt;/strong&gt; Describes the arguments that a command takes. It should return a left-justified string, one argument per line. Here’s the code from the &lt;a href=&quot;https://github.com/rubygems/rubygems/blob/master/lib/rubygems/commands/install_command.rb&quot;&gt;command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;install&lt;/code&gt;&lt;/a&gt;, for example:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;arguments&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;GEMNAME       name of gem to install&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;usage&lt;/code&gt;:&lt;/strong&gt; Displays the usage for an individual gem command. The text “[options]” is automatically appended to the usage text. Take a look on the override of this method at &lt;a href=&quot;https://github.com/rubygems/rubygems/blob/master/lib/rubygems/commands/update_command.rb&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gem::Commands::UpdateCommand&lt;/code&gt;&lt;/a&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;usage&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;program_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; GEMNAME [GEMNAME ...]&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;!-- #### defaults_str --&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;defaults_str&lt;/code&gt;:&lt;/strong&gt; Defines the default arguments from the command. It’s really simple, take a look at this example:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# This method is similar to arguments, but displays the default values.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;defaults_str&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;document&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;no&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;force&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;description:&lt;/strong&gt; This is just a long description for what the command does.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# You can add multiple lines as well&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;description&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;'The `signout` command is used to sign out from all current sessions,'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;' allowing you to sign in using a different set of credentials.'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;execute:&lt;/strong&gt; The generic method that you need to override to handle your command. Parsed option will fill &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;options&lt;/code&gt;, while unparsed option will be left in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;options[:args]&lt;/code&gt;. An override could look something like this:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;c1&quot;&gt;# This will raise Gem::Exception if you don't override it&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:awesome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;add_awesomeness&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;do_other_stuff&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h1&gt;

&lt;p&gt;As you may have noticed, adding a new command to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rubygems&lt;/code&gt; is not rocket science. Adding tests to your new code is very important too!&lt;/p&gt;

&lt;p&gt;BTW, the tests from &lt;a href=&quot;https://github.com/rubygems/rubygems&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rubygems&lt;/code&gt;&lt;/a&gt; are written in &lt;a href=&quot;https://github.com/seattlerb/minitest&quot;&gt;Minitest&lt;/a&gt;, whereas &lt;a href=&quot;https://github.com/bitboxer/gem-web/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem-web&lt;/code&gt;&lt;/a&gt;’s are in &lt;a href=&quot;https://rspec.info/&quot;&gt;Rspec&lt;/a&gt;, so I’ll need to convert them before integrating &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem-web&lt;/code&gt; into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rubygems&lt;/code&gt;. I’ll probably talk about this in next week’s post. Stay tuned! I’m out!&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;display: block; margin: 0 auto;&quot; src=&quot;/assets/img/thats-all.gif&quot; /&gt;&lt;/p&gt;

</description>
        
          <description>&lt;p&gt;I’m currently working on GSoC, and I have to &lt;a href=&quot;/me-and-gsoc/&quot;&gt;Integrate functionality from gem-web into RubyGems gem CLI&lt;/a&gt;. So, we’re going to add a new CLI option to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rubygems&lt;/code&gt;. As my first task on it, my mentor &lt;a href=&quot;http://github.com/zoras&quot;&gt;Saroj Maharjan&lt;/a&gt; (@zoras) sent me some PRs (&lt;a href=&quot;https://github.com/rubygems/rubygems/pull/1938&quot;&gt;#1938&lt;/a&gt; and &lt;a href=&quot;https://github.com/rubygems/rubygems/pull/1944&quot;&gt;#1944&lt;/a&gt;) to study, as well as the &lt;a href=&quot;https://github.com/rubygems/rubygems/blob/master/lib/rubygems/command.rb&quot;&gt;class&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Command&lt;/code&gt; of &lt;a href=&quot;https://github.com/rubygems/rubygems&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rubygems&lt;/code&gt; codebase&lt;/a&gt;. Here’s a bit of what I’ve learned:&lt;/p&gt;

</description>
        
        <pubDate>Mon, 13 May 2019 22:00:00 -0300</pubDate>
        <link>http://matheusrich.github.io/how-rubygems-commands-work/</link>
        <guid isPermaLink="true">http://matheusrich.github.io/how-rubygems-commands-work/</guid>
        
        
        <category>gsoc</category>
        
        <category>ruby</category>
        
        <category>rubygems</category>
        
        <category>cli</category>
        
      </item>
      
    
      
      <item>
        <title>How I got accepted to GSoC 2019</title>
        <description>&lt;h2 id=&quot;my-background&quot;&gt;My background&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.ruby-lang.org/&quot;&gt;Ruby&lt;/a&gt; is my favorite programming language. I’ve been working with it almost every day since 2016, whether on college projects or at work. I love how it is simple, clear, elegant and beautiful. Take a look at the code snippet bellow:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;my_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty?&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;It's empty&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;## No unnecessary braces, semicolons, etc&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;choosing-a-project&quot;&gt;Choosing a project&lt;/h2&gt;

&lt;p&gt;I started web development and quickly discovered &lt;a href=&quot;https://rubyonrails.org/&quot;&gt;Ruby on Rails&lt;/a&gt; and eventually ruby became one of my main tools. This was why I chose the &lt;a href=&quot;httpst//summerofcode.withgoogle.com/organizations/5542255322988544/&quot;&gt;Ruby Org&lt;/a&gt; when I was looking for projects to contribute before GSoC.&lt;/p&gt;

&lt;p&gt;I ran through its &lt;a href=&quot;https://github.com/rubygsoc/rubygsoc/wiki/Ideas-List&quot;&gt;ideas list&lt;/a&gt; and I found some nice projects. One that catched my eye was to &lt;a href=&quot;https://github.com/rubygsoc/rubygsoc/wiki/Ideas-for-RubyGems#integrate-functionality-from-gem-web-into-rubygems-gem-cli&quot;&gt;Integrate functionality from gem-web into RubyGems gem CLI&lt;/a&gt;. This seemed to be a project for me: kinda on my area, but challenging tho. I wanted to learn more about this project, so I could write a better proposal.&lt;/p&gt;

&lt;h2 id=&quot;first-contributions&quot;&gt;First contributions&lt;/h2&gt;
&lt;p&gt;I took a look at &lt;a href=&quot;https://github.com/bitboxer/gem-web/&quot;&gt;gem-web&lt;/a&gt;’s to see what it looks like and make some contribution. Since there were no issues, I look at its files.&lt;/p&gt;

&lt;p&gt;Improving travis is an easy way to get started so this was my &lt;a href=&quot;https://github.com/bitboxer/gem-web/pull/3&quot;&gt;first contribution&lt;/a&gt; to gem-web. This is very important: &lt;strong&gt;don’t be afraid of open source projects&lt;/strong&gt;. This contribution was so simple! Take a look, just one line:&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;display: block; margin: 0 auto;&quot; src=&quot;/assets/img/first-pr.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To get used to the codebase I thought that would be nice to add some tests, so I &lt;a href=&quot;https://github.com/bitboxer/gem-web/pull/5&quot;&gt;added Simplecov&lt;/a&gt; first, and after I would write tests where gem-web was lacking.&lt;/p&gt;

&lt;p&gt;I had to study a bit of the test structure of gem-web (which were written in &lt;a href=&quot;https://rspec.info/&quot;&gt;Rspec&lt;/a&gt;), and the code of rubygems (especially &lt;a href=&quot;https://github.com/rubygems/rubygems/blob/master/lib/rubygems/command.rb&quot;&gt;the Command class&lt;/a&gt;) and gem-web itself. This was my path to my &lt;a href=&quot;https://github.com/bitboxer/gem-web/pull/6&quot;&gt;third contribution&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;my-proposal&quot;&gt;My proposal&lt;/h2&gt;
&lt;p&gt;With the knowlegde adquired from my contribuitons I was able to write a proposal. Ruby provided an &lt;a href=&quot;https://github.com/rubygsoc/rubygsoc/wiki/Student-Application&quot;&gt;application template for students&lt;/a&gt;, so I answered the questions, and wrote a Roadmap of my development process. I followed an advice from an ex-GSoCer to &lt;strong&gt;add time to get feedback from the community&lt;/strong&gt; (particularly from non-linux users), so I add these “Feedback Moments”. I added a &lt;strong&gt;contingency time&lt;/strong&gt; too, because as software developers we know: &lt;em&gt;“Sh!t Happens”&lt;/em&gt;. Here’s &lt;a href=&quot;https://docs.google.com/document/d/1YB1-rBfI9fI9i7cy9_RWV-xD45DMMW3XLnuRWlp_kvg/edit?usp=sharing&quot;&gt;my proposal draft&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With the proposal finished I sent it to the mentors, and waited for feedback (actually they said that my proposal was good, so there are no changes between the draft and the final PDF).&lt;/p&gt;

&lt;h2 id=&quot;project-5260793296191488&quot;&gt;Project #5260793296191488&lt;/h2&gt;

&lt;p&gt;Well, as you know (the title has spoiled you), I &lt;a href=&quot;https://summerofcode.withgoogle.com/projects/#5260793296191488&quot;&gt;got accepted into GSoC&lt;/a&gt; ;) Here’s the nice email that I’ve received:&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;display: block; margin: 0 auto;&quot; src=&quot;/assets/img/gsoc.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;final-thoughts&quot;&gt;Final thoughts&lt;/h2&gt;
&lt;p&gt;Yes, I am very happy to be part of this program. I feel great about myself, because sometimes we feel like we can’t do certain things, and I prove myself wrong. Well, I got accepted on my first try, so I’m not the most experieced about GSoC, but here some tips that may help you:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;My tips:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Pick an org/project/language you like&lt;/strong&gt;.
    &lt;ul&gt;
      &lt;li&gt;You won’t want to work on something you don’t have any bonds with.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Start Early!&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;You can read &lt;a href=&quot;https://google.github.io/gsocguides/student/index&quot;&gt;Google’s Student Guide&lt;/a&gt;, read articles of past students(like this one), etc.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Know your project!&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;You’ll write a proposal, so knowing your project will help you to convince the organization that you are the right person for it. Contributions are welcome here!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Interact with the mentors and the community&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Get in touch with them on IRC channels, Slack, Rocket.chat, Telegram groups or even email! No one is better than them to help you on your first steps.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Use Grammarly!&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;As english is not my first language, I’ve been using &lt;a href=&quot;https://www.grammarly.com/&quot;&gt;Grammarly&lt;/a&gt; to help me write better texts. Give it a try!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Got turned down?&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;There are soooo many people that got turned down on GSoC multiple times before getting accepted! Don’t let this knock you down! It’s time to think about what you could have done better (ask the mentors) and start improving now! &lt;a href=&quot;https://google.github.io/gsocguides/student/being-turned-down&quot;&gt;Read this guide from Google about being turned down.&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DO NOT GIVE UP!&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Just don’t! I know it’s tough, but you’re gonna make it!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
Well, that’s it for now. This text is longer than I expected it to be. Next post will be about my first steps on GSoC. Stay tunned and LET’S GO!&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;display: block; margin: 0 auto;&quot; src=&quot;/assets/img/letsgo.gif&quot; /&gt;&lt;/p&gt;

</description>
        
          <description>&lt;h2 id=&quot;my-background&quot;&gt;My background&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.ruby-lang.org/&quot;&gt;Ruby&lt;/a&gt; is my favorite programming language. I’ve been working with it almost every day since 2016, whether on college projects or at work. I love how it is simple, clear, elegant and beautiful. Take a look at the code snippet bellow:&lt;/p&gt;

</description>
        
        <pubDate>Mon, 13 May 2019 22:00:00 -0300</pubDate>
        <link>http://matheusrich.github.io/me-and-gsoc/</link>
        <guid isPermaLink="true">http://matheusrich.github.io/me-and-gsoc/</guid>
        
        
        <category>gsoc</category>
        
      </item>
      
    
      
      <item>
        <title>Blog.new</title>
        <description>&lt;p&gt;Hello &lt;del&gt;world&lt;/del&gt; everyone! I’m Matheus Richard, a Software Engineering undergraduated student at &lt;a href=&quot;https://www.unb.br/&quot;&gt;UnB&lt;/a&gt; (Brazil). I’m an open source developer, I love music and my newfound passion is game development.&lt;/p&gt;

&lt;p&gt;This is my personal blog, where I’ll share my experiences, things and lessons I’ve learned, and all sort of cool stuff. I believe that teaching is a great way to learn too, so this is a two-way learning process, right?&lt;/p&gt;

&lt;p&gt;Besides that, this will be a way to track my evolution as a developer (and as a writer ;D).&lt;/p&gt;

&lt;p&gt;I’m living a great time in my life, so there are many cool things happening at the same time. I’m currently working on &lt;a href=&quot;https://github.com/rage-of-the-elders/rage-of-the-elders&quot;&gt;my first game&lt;/a&gt;, I &lt;a href=&quot;/me-and-gsoc/&quot;&gt;just got accepted on GSoC 2019&lt;/a&gt; and I’m making a simple pascal compiler, to mention a few of them &lt;em&gt;(I’ll update all this links when I post something about them, so stay tunned!)&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;My intent is to share a bit of what I’ve learned on those things, and I hope this blog helps you! Have fun!&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;display: block; margin: 0 auto;&quot; src=&quot;https://media.giphy.com/media/l1J3CbFgn5o7DGRuE/giphy.gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;P.S.: You can find me on social media through the links in the footer. Get in touch!&lt;/em&gt;&lt;/p&gt;

</description>
        
          <description>&lt;p&gt;Hello &lt;del&gt;world&lt;/del&gt; everyone! I’m Matheus Richard, a Software Engineering undergraduated student at &lt;a href=&quot;https://www.unb.br/&quot;&gt;UnB&lt;/a&gt; (Brazil). I’m an open source developer, I love music and my newfound passion is game development.&lt;/p&gt;

</description>
        
        <pubDate>Mon, 06 May 2019 22:00:00 -0300</pubDate>
        <link>http://matheusrich.github.io/blog-new/</link>
        <guid isPermaLink="true">http://matheusrich.github.io/blog-new/</guid>
        
        
        <category>gsoc</category>
        
      </item>
      
    
  </channel>
</rss>
